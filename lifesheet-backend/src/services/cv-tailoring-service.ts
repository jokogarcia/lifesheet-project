import { GoogleGenerativeAI } from '@google/generative-ai';
import { ICV } from '../models/cv.model';
import { constants } from '../constants';

const GEMINI_API_KEY = constants.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY as string);

const systemPrompt = `You are a helpful assistant that tailors a candidate's CV to a given job description.
Focus on relevance, highlight matching skills/experience, and trim unrelated content.
Preserve the original JSON structure and field naming when possible.`;


export async function tailorCV(
    inputCV: ICV,
    jobDescription: string
): Promise<{ tailored_cv: ICV; tokens_used: number }> {
    // Require API key to be present
    if (!GEMINI_API_KEY) {
        throw new Error('GEMINI_API_KEY is not set. Configure constants.GEMINI_API_KEY before calling tailorCV.');
    }

    // Build prompts
    const modelName = process.env.MODEL_NAME || 'gemini-1.5-flash-latest';
    const userPrompt = `Given the job description below (markdown) and a CV (JSON), produce a tailored CV as JSON. Keep the same top-level structure and keys where possible. You may reorder or remove irrelevant entries, and add short bullet highlights where relevant.\n\nJob Description (Markdown):\n${jobDescription}\n\nOriginal CV (JSON):\n${JSON.stringify(inputCV)}\n\nOutput ONLY valid JSON. Do not include backticks or any commentary.`;
    let attempts = 0;
    try {
        const model = genAI.getGenerativeModel({ model: modelName });
        const prompt = `${systemPrompt}\n\n${userPrompt}`;

        const result = await model.generateContent(prompt);
        const response = result.response;
        let text = response.text();
        text = text.slice(text.indexOf('{'), text.lastIndexOf('}') + 1);

        if (!text) throw new Error('No text returned from model');
        
        let tailored: any;
        try {
            tailored = JSON.parse(text);
            // Validate tailored CV structure
            if (!isValidCV(tailored)) {
                if(attempts++>=2)
                    throw new Error('Invalid CV structure returned from model');
                const newPrompt = `The tailored CV is invalid. Please fix the following issues:\n\n${JSON.stringify(tailored, null, 2)}\n\nOriginal CV (JSON):\n${JSON.stringify(inputCV)}\n\nOutput ONLY valid JSON. Do not include backticks or any commentary.`;
                throw new Error("Alternative path not implemented")
            }
        } catch (e) {
            if(e instanceof SyntaxError) {
                console.error('Syntax error in model output:', e);
                console.error("Attempted to parse: ",text)

            }
            throw new Error('Failed to parse JSON from model output: ' + String(e));
        }

        const usage = await model.countTokens(prompt);
        const tokens = usage.totalTokens;
        const newcv = tailored as ICV;
        newcv._id = undefined;// prevent ids generated by the AI to be included
        newcv.updated_at = new Date();
        newcv.created_at = new Date();
        return { tailored_cv: newcv, tokens_used: tokens };
    } catch (e: any) {
        console.error('AI tailoring failed:', e?.message || e);
        throw new Error('AI tailoring failed: ' + (e?.message || String(e)));
    }
}

export async function generateCoverLetter(
    tailored_cv: ICV,
    jobDescription: string,
    userId: string,
    companyName?: string
): Promise<string> {
    if (!GEMINI_API_KEY) {
        throw new Error('GEMINI_API_KEY is not set. Configure constants.GEMINI_API_KEY before calling generateCoverLetter.');
    }

    const modelName = process.env.MODEL_NAME || 'gemini-1.5-flash-latest';

    const briefCv = JSON.stringify(tailored_cv);
    const companyLine = companyName ? ` for ${companyName}` : '';
    const prompt = `Write a concise, professional cover letter${companyLine} for the following job description and candidate. Keep it to ~3 short paragraphs (intro, fit, closing). Use a friendly but formal tone. Do not include any commentary or JSONâ€”output markdown-formatted text only.\n\nJob description:\n${jobDescription}\n\nTailored CV (JSON):\n${briefCv}`;

    try {
        const model = genAI.getGenerativeModel({ model: modelName });
        const result = await model.generateContent(prompt);
        const response = result.response;
        const text = response.text();


        if (!text) throw new Error('No text returned from model');

        // Trim and return plain text
        return String(text).trim();
    } catch (e: any) {
        console.error('Cover letter generation failed:', e?.message || e);
        throw new Error('Cover letter generation failed: ' + (e?.message || String(e)));
    }
}

function isValidCV(tailored: any) {
    //TODO:implement
    return true;
}

